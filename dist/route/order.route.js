"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_middleware_1 = require("../middleware/auth.middleware");
const order_controller_1 = require("../controller/order.controller");
const orderRouter = (0, express_1.Router)();
orderRouter.post("/create", auth_middleware_1.isAuthenticated, order_controller_1.createOrder);
orderRouter.post("/verify", auth_middleware_1.isAuthenticated, order_controller_1.VerifyPayment);
orderRouter.post("/cancel", auth_middleware_1.isAuthenticated, order_controller_1.cancelOrder);
orderRouter.post("/return", auth_middleware_1.isAuthenticated, order_controller_1.returnPolicy);
orderRouter.post("/process-return", auth_middleware_1.isAuthenticated, order_controller_1.processReturnedItems);
orderRouter.post("/request-replace", auth_middleware_1.isAuthenticated, order_controller_1.replacePolicy);
orderRouter.post("/process-replacement", auth_middleware_1.isAuthenticated, order_controller_1.processReplacement);
orderRouter.get("/filter", auth_middleware_1.isAuthenticated, order_controller_1.FilterOrders);
orderRouter.get("/search", auth_middleware_1.isAuthenticated, order_controller_1.searchOrders);
orderRouter.put("/update", auth_middleware_1.isAuthenticated, order_controller_1.updateOrderStatus);
orderRouter.get("/filter-order", auth_middleware_1.isAuthenticated, (0, auth_middleware_1.authorization)(["delivery_boy", "admin"]), order_controller_1.FilterOrdersForAdmin);
orderRouter.get("/single/:orderId", auth_middleware_1.isAuthenticated, order_controller_1.GetSingleOrder);
exports.default = orderRouter;
